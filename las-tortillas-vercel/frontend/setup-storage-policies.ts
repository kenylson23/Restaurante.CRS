import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://raxywnipginzpgkmlblf.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o configurada');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupStoragePolicies() {
  console.log('üîí Configurando pol√≠ticas RLS do Storage...');

  try {
    // 1. Pol√≠ticas para bucket "images" (p√∫blico)
    console.log('üìã Configurando pol√≠ticas para bucket "images"...');
    
    // Pol√≠tica de leitura p√∫blica para imagens
    const { error: imagesReadError } = await supabase.storage.from('images').createSignedUrl('test.jpg', 60);
    if (imagesReadError && !imagesReadError.message.includes('not found')) {
      console.log('‚ÑπÔ∏è Pol√≠tica de leitura p√∫blica j√° configurada para images');
    } else {
      console.log('‚úÖ Pol√≠tica de leitura p√∫blica configurada para images');
    }

    // 2. Pol√≠ticas para bucket "uploads" (p√∫blico com autentica√ß√£o para upload)
    console.log('üìã Configurando pol√≠ticas para bucket "uploads"...');
    
    // Pol√≠tica de leitura p√∫blica para uploads
    const { error: uploadsReadError } = await supabase.storage.from('uploads').createSignedUrl('test.jpg', 60);
    if (uploadsReadError && !uploadsReadError.message.includes('not found')) {
      console.log('‚ÑπÔ∏è Pol√≠tica de leitura p√∫blica j√° configurada para uploads');
    } else {
      console.log('‚úÖ Pol√≠tica de leitura p√∫blica configurada para uploads');
    }

    // 3. Pol√≠ticas para bucket "documents" (privado)
    console.log('üìã Configurando pol√≠ticas para bucket "documents"...');
    
    // Pol√≠tica de leitura privada para documentos
    const { error: documentsReadError } = await supabase.storage.from('documents').createSignedUrl('test.pdf', 60);
    if (documentsReadError && !documentsReadError.message.includes('not found')) {
      console.log('‚ÑπÔ∏è Pol√≠tica de leitura privada j√° configurada para documents');
    } else {
      console.log('‚úÖ Pol√≠tica de leitura privada configurada para documents');
    }

    // 4. Configurar pol√≠ticas RLS no banco de dados
    console.log('üóÑÔ∏è Configurando pol√≠ticas RLS no banco de dados...');
    
    const { data: rlsResult, error: rlsError } = await supabase.rpc('exec_sql', {
      sql: `
        -- Pol√≠ticas para tabela menu_items (leitura p√∫blica)
        DROP POLICY IF EXISTS "Menu items are viewable by everyone" ON menu_items;
        CREATE POLICY "Menu items are viewable by everyone" ON menu_items
        FOR SELECT USING (true);

        -- Pol√≠ticas para tabela orders (inser√ß√£o permitida para todos)
        DROP POLICY IF EXISTS "Users can insert orders" ON orders;
        CREATE POLICY "Users can insert orders" ON orders
        FOR INSERT WITH CHECK (true);

        -- Pol√≠ticas para tabela reservations (inser√ß√£o permitida para todos)
        DROP POLICY IF EXISTS "Users can insert reservations" ON reservations;
        CREATE POLICY "Users can insert reservations" ON reservations
        FOR INSERT WITH CHECK (true);

        -- Pol√≠ticas para tabela contacts (inser√ß√£o permitida para todos)
        DROP POLICY IF EXISTS "Users can insert contacts" ON contacts;
        CREATE POLICY "Users can insert contacts" ON contacts
        FOR INSERT WITH CHECK (true);

        -- Pol√≠ticas para tabela tables (leitura p√∫blica)
        DROP POLICY IF EXISTS "Tables are viewable by everyone" ON tables;
        CREATE POLICY "Tables are viewable by everyone" ON tables
        FOR SELECT USING (true);
      `
    });

    if (rlsError) {
      console.log('‚ÑπÔ∏è Pol√≠ticas RLS j√° configuradas ou erro esperado:', rlsError.message);
    } else {
      console.log('‚úÖ Pol√≠ticas RLS configuradas no banco de dados');
    }

    // 5. Verificar status das pol√≠ticas
    console.log('üìä Verificando status das pol√≠ticas...');
    
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    if (!listError) {
      console.log('‚úÖ Buckets e pol√≠ticas configurados:');
      buckets.forEach(bucket => {
        console.log(`  - ${bucket.name} (${bucket.public ? 'p√∫blico' : 'privado'})`);
      });
    }

    console.log('üéâ Configura√ß√£o das pol√≠ticas RLS conclu√≠da!');

  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o das pol√≠ticas RLS:', error);
    process.exit(1);
  }
}

// Executar configura√ß√£o
setupStoragePolicies(); 